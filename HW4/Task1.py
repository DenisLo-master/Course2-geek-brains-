# 1. Проанализировать скорость и сложность одного любого алгоритма, разработанных в рамках домашнего задания первых трех уроков.
#Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.


#### 6. В одномерном массиве найти сумму элементов, находящихся между минимальным и максимальным элементами. Сами минимальный и максимальный элементы в сумму не включать.



import time

l_num = []

def time_func(func):
    def wrapper():
        start_time = time.time()
        res = func()
        end_time =  time.time()
        print('\nВремя исполнения', end_time-start_time,'\n')
        return res
    return wrapper



@time_func
def sum_between():
    global list0
    try:
        _list = list0.copy()
        _list.sort()
        min = list0.index(_list[0])
        max = list0.index(_list[-1])
        res = 0
        for _num in range(len(_list)):
            if _list[_num] == list0[min] or _list[_num] == list0[max]:
                _list[_num]=0
            else:
                res += _list[_num]
        return f'Список: \nСумма между min({list0[min]}) и max({list0[max]}): {res}\nsum_between_()'
    except ValueError or TypeError:
        return f'\nОШИБКА: необходимо передать только массив чисел'


@time_func
def sum_between_all():
    global list1
    res=0
    try:
        list2 = list0.copy()
        min=max=list2[0]
        for _num in list2:
            if _num < min :
                min=_num
            elif _num>max:
                max=_num
        print(max)
        for i in list2:
            if i == min or i == max:
                list2[list2.index(i)]=0
            else:
                res += i
        return f'Список: \nСумма между min({min}) и max({max}): {res}\nsum_between_all()'
    except ValueError or TypeError:
        return f'\nОШИБКА: необходимо передать только массив чисел'

list0 = [7, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454, 3, 3, 6, 6, 4,5,23,55,3,4,2,7,55,6,7,223,44,6665,44,3454] 
list(map(int, list0))
#тестовыее данные
print(sum_between_all())
print(sum_between())



#Вывод
#сложность:
#  O(n2) для функции sum_between_all(), 
#  O(n) для функции sum_between_(), 

# порядок роста:
#  O(n) для функции sum_between_all(), 
#  O(n) для функции sum_between_(), 
